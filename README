
    =========================================================
    Geant4 - an Object-Oriented Toolkit for Simulation in HEP
    =========================================================

                              sndwrm
                              --------


This simulation began as the G4 example sndwrm, which has the physics lists and starter code to decay radioactive isotopes. It has since evolved to have correct neutron 
physics lists, a simple C++-coded DUNE FD-like geometry (no gdml), and now optical physics. The geometry is basically a big box of LAr with tall vertical acrylic walls inside. 
On the interior of those walls are SiPMs covering at a settable photocathode coverage fraction, viewing the interior. There is a plane of such SiPMs at the 
central "would-be" cathode plane (ala the VD design) also.

Isotopes can be decayed, single particles like neutrons or electrons may be launched, etc. All to be arranged in the control n_optphys.mac file.

First, you must set up in a manner similar to the following. These are Eric's paths. Yours will surely  be different. But you must have G410.4+ and ROOT6+ and now MARLEY installed. The last setup
is for python and is not strictly necessary; it allows to write analysis macros in python, not ROOT. 

NOTE: as of v1.0 of this code, you need MARLEY. Download it at https://github.com/MARLEY-MC/marley.git, build it, before proceeding to execute commands below.

source ~/geant4.10.05/install/bin/geant4.sh 
source /usr/local/bin/thisroot.sh 
export MARLEY=/Users/chur558/marley
export DYLD_LIBRARY_PATH=/usr/local/lib:/Users/chur558/marley/build
source ~/venvs/bin/activate

To build sndwrm after downloading, make a build directory parallel to /src and /macro called /build. Go to it and do 

cmake ../
make

Run from the build directory, as
./sndwrm

You should now be at an interactive geant4 prompt. Say the following to launch neutrons
g4> /control/execute ../macros/n_optphys.mac
Then, to run one event, do
g4> /run/beamOn 1

Ctl-D out of the executable when done, and note that the above created your new ROOT file, n_optphys.root.

Then, in python, do something like the following
> from ROOT import TFile
> f = TFile("n_optphys.root")
> f.Steps.Draw("TZ:TY","TVolume==\"SiPM\"&&PID==0") # for example, to see the termination z-y coordinate of photons that end their step (and lives) in a SiPM
> # The below will show you the TTree variables available to you.
> f.Steps.Show(0)
> f.Tracks.Show(0)


To run a multi-event job with no graphics, comment out with a '#' the line that says vis.mac in n_optphys.mac, and comment back in at the end a 
line like /run/beamOn 200. Then at your command line, say
nohup ./sndwrm ../macros/n_optphys.mac >& noh.out &


I have a trick to run "photon bombs," employed in ../macros/pbomb_optphys.mac. If you specify to launch a "geantino," the code in ~/src/PrimaryGenerator*
will reinterpret that to launch a fixed number of isotropic opticalphotons inside a hard-coded box (inside the Acrylic volume, for now). Try it as:

./sndwrm ../macros/pbomb_optphys.mac

The similar trick to run MARLEY events is employed in ../macros/marley_optphys.mac. It specifies to launch "nu_e"s, which tells PrimaryGenerator* to interpret
that to launch one MARLEY event. Running 10 events in marley_optphys.mac causes 10 MARLEY events to run inside the Acrylic volume -- one per G4 event. Try it as
./sndwrm ../macros/marley_optphys.mac

# Ask eric.church@pnnl.gov for help, as needed.

